// Generated by SolidPython 1.1.3 on 2025-03-05 22:55:32
$fn=50;


intersection() {
	translate(v = [-5.0000000000, -5.0000000000, -5.0000000000]) {
		linear_extrude(height = 10) {
			polygon(points = [[9.3301270189, 7.5000000000], [9.0387948484, 7.9475644476], [8.7013899854, 8.3615044513], [8.3217613875, 8.7370979763], [7.9042396813, 9.0700604263], [7.4535877600, 9.3565935206], [6.9749464512, 9.5934286231], [6.4737758721, 9.7778640289], [5.9557931435, 9.9077957850], [5.4269071715, 9.9817416901], [4.8931512411, 9.9988582039], [4.3606141916, 9.9589500691], [3.8353709579, 9.8624725392], [3.3234132705, 9.7105261849], [2.8305813044, 9.5048443395], [2.3624970575, 9.2477733259], [1.9245002169, 8.9422456905], [1.5215872470, 8.5917467505], [1.1583543913, 8.2002748347], [0.8389452414, 7.7722956725], [0.5670034681, 7.3126914512], [0.3456312568, 6.8267051218], [0.1773539185, 6.3198805903], [0.0640910829, 5.7979994752], [0.0071347997, 5.2670151533], [0.0071347997, 4.7329848467], [0.0640910829, 4.2020005248], [0.1773539185, 3.6801194097], [0.3456312568, 3.1732948782], [0.5670034681, 2.6873085488], [0.8389452414, 2.2277043275], [1.1583543913, 1.7997251653], [1.5215872470, 1.4082532495], [1.9245002169, 1.0577543095], [2.3624970575, 0.7522266741], [2.8305813044, 0.4951556605], [3.3234132705, 0.2894738151], [3.8353709579, 0.1375274608], [4.3606141916, 0.0410499309], [4.8931512411, 0.0011417961], [5.4269071715, 0.0182583099], [5.9557931435, 0.0922042150], [6.4737758721, 0.2221359711], [6.9749464512, 0.4065713769], [7.4535877600, 0.6434064794], [7.9042396813, 0.9299395737], [8.3217613875, 1.2629020237], [8.7013899854, 1.6384955487], [9.0387948484, 2.0524355524], [9.3301270189, 2.5000000000], [7.8867513459, 3.3333333333], [7.6925298989, 3.0349570350], [7.4675933236, 2.7589970325], [7.2145075917, 2.5086013491], [6.9361597875, 2.2866263825], [6.6357251733, 2.0956043196], [6.3166309674, 1.9377142513], [5.9825172480, 1.8147573140], [5.6371954290, 1.7281361434], [5.2846047810, 1.6788388733], [4.9287674940, 1.6674278641], [4.5737427944, 1.6940332873], [4.2235806386, 1.7583516405], [3.8822755137, 1.8596492101], [3.5537208696, 1.9967704403], [3.2416647050, 2.1681511161], [2.9496668113, 2.3718362063], [2.6810581647, 2.6055021663], [2.4389029276, 2.8664834436], [2.2259634943, 3.1518028850], [2.0446689788, 3.4582056992], [1.8970875045, 3.7821965854], [1.7849026123, 4.1200796064], [1.7093940553, 4.4680003499], [1.6714231998, 4.8219898978], [1.6714231998, 5.1780101022], [1.7093940553, 5.5319996501], [1.7849026123, 5.8799203936], [1.8970875045, 6.2178034146], [2.0446689788, 6.5417943008], [2.2259634943, 6.8481971150], [2.4389029276, 7.1335165564], [2.6810581647, 7.3944978337], [2.9496668113, 7.6281637937], [3.2416647050, 7.8318488839], [3.5537208696, 8.0032295597], [3.8822755137, 8.1403507899], [4.2235806386, 8.2416483595], [4.5737427944, 8.3059667127], [4.9287674940, 8.3325721359], [5.2846047810, 8.3211611267], [5.6371954290, 8.2718638566], [5.9825172480, 8.1852426860], [6.3166309674, 8.0622857487], [6.6357251733, 7.9043956804], [6.9361597875, 7.7133736175], [7.2145075917, 7.4913986509], [7.4675933236, 7.2410029675], [7.6925298989, 6.9650429650], [7.8867513459, 6.6666666667]]);
		}
	}
	rotate(a = 90, v = [0, 1, 0]) {
		translate(v = [-5.0000000000, -5.0000000000, -5.0000000000]) {
			linear_extrude(height = 10) {
				polygon(points = [[0, 0], [2.0000000000, 0], [2.0000000000, 4.0000000000], [7.5000000000, 4.0000000000], [7.5000000000, 6.0000000000], [2.0000000000, 6.0000000000], [2.0000000000, 8.0000000000], [10, 8.0000000000], [10, 10], [0, 10]]);
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from solid import *
from solid.utils import *

import math
import matplotlib.pyplot as plt
import subprocess
import os
import grok_letters as grok
import grok_think as grok_think
import letters as let
import o1_letters as o1
import letter_holes as letter_holes

def arc_points(radius, start_angle, end_angle, center=[0,0], num_points=50):
    angles = [start_angle + i * (end_angle - start_angle) / (num_points - 1)
              for i in range(num_points)]
    points = [
        (center[0] + radius * math.cos(math.radians(angle)),
         center[1] + radius * math.sin(math.radians(angle)))
        for angle in angles
    ]
    return points

class Letter2D:
    def __init__(self, letter, scale):
        self.letter = letter
        self.scale = scale
        self.shape = self.generate()
    
    def get_letter_points(self):
        points = getattr(let, self.letter)
        # points = getattr(o1, self.letter)
        # points = getattr(grok, self.letter)
        scaled_points = [(point[0] * self.scale, point[1] * self.scale) for point in points]
        return scaled_points

    def get_letter_holes(self):
        try:
            holes = getattr(letter_holes, self.letter)
        except:
            holes = []

        scaled_holes = [letter_holes.Hole(hole.radius*self.scale, hole.x*self.scale, hole.y*self.scale) for hole in holes]
        return scaled_holes

    
    def generate(self):
        shape = polygon(points=self.get_letter_points())
        holes = self.get_letter_holes()

        if holes:
            for hole in holes:
                circle_hole = circle(r=hole.radius)
                positioned_hole = translate([hole.x, hole.y])(circle_hole)
                shape = difference()(shape, positioned_hole)
        return shape
    

    def render(self):
        scad_render_to_file(self.shape, f"output/{self.name}.scad", file_header='$fn=50;')
        subprocess.run(["C:\\Program Files\\OpenSCAD\\openscad.exe", "-o", f"output\\{self.name}.stl", f"output\\{self.name}.scad"])


class TwoLetter3D:
    def __init__(self, height, letterA, letterB=None):
        self.height = height
        self.letterA = letterA
        self.letterB = letterB
    

    def generate_3d_letter(self, letter):
        letter = letter.upper()
        # TODO: add catch here for is letter is not a letter
        shape = Letter2D(letter, self.height).generate()
        shape_3d = linear_extrude(height=self.height)(shape)
        centered_shape_3d = translate([-self.height/2, -self.height/2, -self.height/2])(shape_3d)
        return centered_shape_3d


    def render(self):
        letterA3D = self.generate_3d_letter(self.letterA)

        if self.letterB:
            letterB3D = self.generate_3d_letter(self.letterB)
            letterB3D = rotate(a=90, v=[0,1,0])(letterB3D)

            combined = intersection()(letterA3D, letterB3D)
            file_name = self.letterA + self.letterB
            scad_render_to_file(combined, f"output/{file_name}.scad", file_header='$fn=50;')
            subprocess.run(["C:\\Program Files\\OpenSCAD\\openscad.exe", "-o", f"output\\{file_name}.stl", f"output\\{file_name}.scad"])
            return
        else:
            # file_name = "o1_" + self.letterA
            # file_name = "grok_think_" + self.letterA
            file_name = self.letterA
            # file_name = "grok_" + self.letterA
            scad_render_to_file(letterA3D, f"output/{file_name}.scad", file_header='$fn=50;')
            subprocess.run(["C:\\Program Files\\OpenSCAD\\openscad.exe", "-o", f"output\\{file_name}.stl", f"output\\{file_name}.scad"])
            # subprocess.run(["openscad", "-o", f"output\\{file_name}.png", f"output\\{file_name}.scad", "--imgsize=800,600", "--autocenter"])
            subprocess.run(["openscad", "-o", f"output\\{file_name}.png", f"output\\{file_name}.scad", "--imgsize=800,600", "--camera=0,0,30,0,0,0", "--viewall", "--autocenter", "--projection=o"])
            os.remove(f"output/{file_name}.scad")
            return
                


if __name__ == "__main__":
    os.makedirs("output", exist_ok=True)

    # Generate a letter
    # letter = input()
    # shape = TwoLetter3D(10, letter)
    # shape.render()
    
    # letters = [chr(x) for x in range(ord('A'), ord('J') + 1)]

    # # Generate all combos
    # for letter in letters:
    #     for other_letter in letters:
    #         shape = TwoLetter3D(10, letter, other_letter)
    #         shape.render()

    # Generate an input combo
    letter1 = input("Enter the first letter:")
    letter2 = input("Enter the second letter:")
    shape = TwoLetter3D(10, letter1, letter2)
    shape.render() 
 
************************************************/
