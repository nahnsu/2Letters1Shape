// Generated by SolidPython 1.1.3 on 2025-02-21 17:32:18
$fn=50;


translate(v = [-5.0000000000, -5.0000000000, -5.0000000000]) {
	linear_extrude(height = 10) {
		polygon(points = [[9.3301270189, 7.5000000000], [9.0070681093, 7.9905526525], [8.6287102231, 8.4398346060], [8.2002748347, 8.8416456087], [7.7276745061, 9.1904405245], [7.2174312912, 9.4814058585], [6.6765867295, 9.7105261849], [6.1126046698, 9.8746395609], [5.5332682667, 9.9714811632], [4.9465725703, 9.9997145428], [4.3606141916, 9.9589500691], [3.7834795663, 9.8497503064], [3.2231333592, 9.6736222505], [2.6873085488, 9.4329965319], [2.1833997097, 9.1311938716], [1.7183609645, 8.7723792546], [1.2986100146, 8.3615044513], [0.9299395737, 7.9042396813], [0.6174374260, 7.4068953623], [0.3654162133, 6.8763350244], [0.1773539185, 6.3198805903], [0.0558458689, 5.7452113309], [0.0025689190, 5.1602578879], [0.0182583099, 4.5730928285], [0.1026975223, 3.9918192412], [0.2547212649, 3.4244589099], [0.4722315555, 2.8788416105], [0.7522266741, 2.3624970575], [1.0908425877, 1.8825509907], [1.4834062751, 1.4456268381], [1.9245002169, 1.0577543095], [2.4080371584, 0.7242861850], [2.9273441165, 0.4498244442], [3.4752544690, 0.2381567575], [4.0442068565, 0.0922042150], [4.6263495321, 0.0139810141], [5.2136487181, 0.0045666629], [5.7979994752, 0.0640910829], [6.3713375534, 0.1917328158], [6.9257506816, 0.3857303598], [7.4535877600, 0.6434064794], [7.9475644476, 0.9612051516], [8.4008636889, 1.3347406409], [8.8072297918, 1.7588580235], [9.1610547586, 2.2277043275], [9.4574556777, 2.7348093058], [9.6923421102, 3.2731747279], [9.8624725392, 3.8353709579], [9.9654991036, 4.4136394863], [10.0000000000, 5.0000000000], [5.0000000000, 5.0000000000], [5.0000000000, 3.3333333333], [7.8867513459, 3.3333333333], [7.6925298989, 3.0349570350], [7.4675933236, 2.7589970325], [7.2145075917, 2.5086013491], [6.9361597875, 2.2866263825], [6.6357251733, 2.0956043196], [6.3166309674, 1.9377142513], [5.9825172480, 1.8147573140], [5.6371954290, 1.7281361434], [5.2846047810, 1.6788388733], [4.9287674940, 1.6674278641], [4.5737427944, 1.6940332873], [4.2235806386, 1.7583516405], [3.8822755137, 1.8596492101], [3.5537208696, 1.9967704403], [3.2416647050, 2.1681511161], [2.9496668113, 2.3718362063], [2.6810581647, 2.6055021663], [2.4389029276, 2.8664834436], [2.2259634943, 3.1518028850], [2.0446689788, 3.4582056992], [1.8970875045, 3.7821965854], [1.7849026123, 4.1200796064], [1.7093940553, 4.4680003499], [1.6714231998, 4.8219898978], [1.6714231998, 5.1780101022], [1.7093940553, 5.5319996501], [1.7849026123, 5.8799203936], [1.8970875045, 6.2178034146], [2.0446689788, 6.5417943008], [2.2259634943, 6.8481971150], [2.4389029276, 7.1335165564], [2.6810581647, 7.3944978337], [2.9496668113, 7.6281637937], [3.2416647050, 7.8318488839], [3.5537208696, 8.0032295597], [3.8822755137, 8.1403507899], [4.2235806386, 8.2416483595], [4.5737427944, 8.3059667127], [4.9287674940, 8.3325721359], [5.2846047810, 8.3211611267], [5.6371954290, 8.2718638566], [5.9825172480, 8.1852426860], [6.3166309674, 8.0622857487], [6.6357251733, 7.9043956804], [6.9361597875, 7.7133736175], [7.2145075917, 7.4913986509], [7.4675933236, 7.2410029675], [7.6925298989, 6.9650429650], [7.8867513459, 6.6666666667]]);
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from solid import *
from solid.utils import *

import math
import matplotlib.pyplot as plt
import subprocess
import os
import pdb

def arc_points(radius, start_angle, end_angle, center=[0,0], num_points=50):
    angles = [start_angle + i * (end_angle - start_angle) / (num_points - 1)
              for i in range(num_points)]
    points = [
        (center[0] + radius * math.cos(math.radians(angle)),
         center[1] + radius * math.sin(math.radians(angle)))
        for angle in angles
    ]
    return points

class Hole:
    def __init__(self, radius, x, y):
        """
        Hole defined by:
        :param x: x dimension for center point of the circle as a ratio of letter height
        :param y: y dimension for center point of the circle as a ratio of letter height
        :param radius: radius of circle as a ratio of letter height
        """
        self.x = x
        self.y = y
        self.radius = radius

class Letter2D:
    def __init__(self, letter, scale):
        self.letter = letter
        self.scale = scale
        self.shape = self.generate()


    def get_letter_points(self):
        points = []
        if self.letter == "A":
            points = [(0,0), (1/2, 1), (1, 0), (5/6, 0), (2/3, 1/3), (1/3, 1/3), (1/6, 0)]
        if self.letter == "B":
            top_arc_points = arc_points(1/4, 90, -90, center=[3/4, 3/4])
            bottom_arc_points = arc_points(1/4, 90, -90, center=[3/4, 1/4])
            other_points = [(0,0),(0,1)]
            points = top_arc_points + bottom_arc_points + other_points
        if self.letter == "C":
            outer_arc_points = arc_points(1/2, 30, 330, center=[1/2,1/2])
            inner_arc_points = arc_points(1/4, 30, 330, center=[1/2,1/2])[::-1]
            points = outer_arc_points + inner_arc_points
        if self.letter == "D":
            outer_arc_points = arc_points(1/2, 90, -90, center= [1/2, 1/2])
            points = outer_arc_points + [(0,0), (0, 1)]
        if self.letter == "E":
            points = [(0,0), (1,0), (1,1/5), (1/5,1/5), (1/5,2/5), (3/4,2/5), (3/4,3/5), (1/5,3/5), (1/5,4/5), (1,4/5), (1,1), (0,1)]
        if self.letter == "F":
            points = [(0,0), (1/5,0), (1/5,2/5), (3/4,2/5), (3/4,3/5), (1/5,3/5), (1/5,4/5), (1,4/5), (1,1), (0,1)]
        if self.letter == "G":
            outer_arc_points = arc_points(1/2, 30, 360, center=[1/2,1/2])
            other_points = [(1/2,1/2), (1/2, 1/3)]
            x = sqrt((1/3)**2 - (1/6)**2)
            theta = math.degrees(math.atan((1/6)/x))
            inner_arc_points = arc_points(1/3, 360 - theta, 30, center=[1/2,1/2])
            points = outer_arc_points + other_points + inner_arc_points
        # TODO: change so these have line width 1/6 more in line with other styles
        if self.letter == "H":
            points = [(0,0), (1/3,0), (1/3,1/3), (2/3,1/3), (2/3,0), (1,0), (1,1), (2/3,1), (2/3,2/3), (1/3,2/3), (1/3,1), (0,1)]
        if self.letter == "I":
            points = [(0,0), (1,0), (1,1/3), (2/3,1/3), (2/3,2/3), (1,2/3), (1,1), (0,1), (0,2/3), (1/3,2/3), (1/3,1/3), (0,1/3)]

        scaled_points = [(p[0] * self.scale, p[1] * self.scale) for p in points]
        return scaled_points
    

    def get_letter_holes(self):
        holes = []
        if self.letter == "A": 
            holes = [Hole(1/6, 1/2, 7/12)]
        if self.letter == "B":
            holes = [Hole(1/6, 1/2, 3/4), Hole(1/6, 1/2, 1/4)]
        if self.letter == "D":
            holes = [Hole(1/2, 1/2, 1/6)]

        scaled_holes = [Hole(hole.radius*self.scale, hole.x*self.scale, hole.y*self.scale) for hole in holes]
        return scaled_holes

    
    def generate(self):
        outer_shape_points = self.get_letter_points()
        shape = polygon(points=outer_shape_points)
        holes = self.get_letter_holes()

        if holes:
            for hole in holes:
                circle_hole = circle(r=hole.radius)
                positioned_hole = translate([hole.x, hole.y])(circle_hole)
                shape = difference()(shape, positioned_hole)
        return shape
    
    def render(self):
        scad_render_to_file(self.shape, f"output/{self.name}.scad", file_header='$fn=50;')
        subprocess.run(["C:\\Program Files\\OpenSCAD\\openscad.exe", "-o", f"output\\{self.name}.stl", f"output\\{self.name}.scad"])


class TwoLetter3D:
    def __init__(self, height, letterA, letterB=None):
        self.height = height
        self.letterA = letterA
        self.letterB = letterB
    

    def generate_3d_letter(self, letter):
        letter = letter.upper()
        # TODO: add catch here for is letter is not a letter
        shape = Letter2D(letter, self.height).generate()
        shape_3d = linear_extrude(height=self.height)(shape)
        centered_shape_3d = translate([-self.height/2, -self.height/2, -self.height/2])(shape_3d)
        return centered_shape_3d


    def render(self):
        letterA3D = self.generate_3d_letter(self.letterA)

        if self.letterB:
            letterB3D = self.generate_3d_letter(self.letterB)
            letterB3D = rotate(a=90, v=[0,1,0])(letterB3D)

            combined = intersection()(letterA3D, letterB3D)
            file_name = self.letterA + self.letterB
            scad_render_to_file(combined, f"output/{file_name}.scad", file_header='$fn=50;')
            subprocess.run(["C:\\Program Files\\OpenSCAD\\openscad.exe", "-o", f"output\\{file_name}.stl", f"output\\{file_name}.scad"])
            return
        else:
            file_name = self.letterA
            scad_render_to_file(letterA3D, f"output/{file_name}.scad", file_header='$fn=50;')
            subprocess.run(["C:\\Program Files\\OpenSCAD\\openscad.exe", "-o", f"output\\{file_name}.stl", f"output\\{file_name}.scad"])
            return
                


if __name__ == "__main__":
    os.makedirs("output", exist_ok=True)
    
    letters = [chr(x) for x in range(ord('A'), ord('H') + 1)]

    # Generate all combos
    # for letter in letters:
    #     for other_letter in letters:
    #         shape = TwoLetter3D(10, letter, other_letter)
    #         shape.render()

    # Generate all letters
    # for letter in letters:
    #     shape = TwoLetter3D(10, letter, "z")
    #     shape.render()

    #Generate a letter
    shape = TwoLetter3D(10, "G")
    shape.render()
 
 
************************************************/
