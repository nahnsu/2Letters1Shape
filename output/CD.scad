// Generated by SolidPython 1.1.3 on 2025-02-20 03:32:17
$fn=50;


intersection() {
	rotate(a = 90, v = [0, 1, 0]) {
		translate(v = [-5.0000000000, -5.0000000000, -5.0000000000]) {
			linear_extrude(height = 10) {
				polygon(points = [[4.3301270189, 2.5000000000], [4.0387948484, 2.9475644476], [3.7013899854, 3.3615044513], [3.3217613875, 3.7370979763], [2.9042396813, 4.0700604263], [2.4535877600, 4.3565935206], [1.9749464512, 4.5934286231], [1.4737758721, 4.7778640289], [0.9557931435, 4.9077957850], [0.4269071715, 4.9817416901], [-0.1068487589, 4.9988582039], [-0.6393858084, 4.9589500691], [-1.1646290421, 4.8624725392], [-1.6765867295, 4.7105261849], [-2.1694186956, 4.5048443395], [-2.6375029425, 4.2477733259], [-3.0754997831, 3.9422456905], [-3.4784127530, 3.5917467505], [-3.8416456087, 3.2002748347], [-4.1610547586, 2.7722956725], [-4.4329965319, 2.3126914512], [-4.6543687432, 1.8267051218], [-4.8226460815, 1.3198805903], [-4.9359089171, 0.7979994752], [-4.9928652003, 0.2670151533], [-4.9928652003, -0.2670151533], [-4.9359089171, -0.7979994752], [-4.8226460815, -1.3198805903], [-4.6543687432, -1.8267051218], [-4.4329965319, -2.3126914512], [-4.1610547586, -2.7722956725], [-3.8416456087, -3.2002748347], [-3.4784127530, -3.5917467505], [-3.0754997831, -3.9422456905], [-2.6375029425, -4.2477733259], [-2.1694186956, -4.5048443395], [-1.6765867295, -4.7105261849], [-1.1646290421, -4.8624725392], [-0.6393858084, -4.9589500691], [-0.1068487589, -4.9988582039], [0.4269071715, -4.9817416901], [0.9557931435, -4.9077957850], [1.4737758721, -4.7778640289], [1.9749464512, -4.5934286231], [2.4535877600, -4.3565935206], [2.9042396813, -4.0700604263], [3.3217613875, -3.7370979763], [3.7013899854, -3.3615044513], [4.0387948484, -2.9475644476], [4.3301270189, -2.5000000000], [2.1650635095, -1.2500000000], [2.0193974242, -1.4737822238], [1.8506949927, -1.6807522257], [1.6608806938, -1.8685489881], [1.4521198406, -2.0350302131], [1.2267938800, -2.1782967603], [0.9874732256, -2.2967143115], [0.7368879360, -2.3889320145], [0.4778965718, -2.4538978925], [0.2134535857, -2.4908708451], [-0.0534243795, -2.4994291020], [-0.3196929042, -2.4794750346], [-0.5823145210, -2.4312362696], [-0.8382933648, -2.3552630924], [-1.0847093478, -2.2524221698], [-1.3187514713, -2.1238866629], [-1.5377498915, -1.9711228453], [-1.7392063765, -1.7958733752], [-1.9208228043, -1.6001374173], [-2.0805273793, -1.3861478363], [-2.2164982659, -1.1563457256], [-2.3271843716, -0.9133525609], [-2.4113230407, -0.6599402952], [-2.4679544585, -0.3989997376], [-2.4964326001, -0.1335075766], [-2.4964326001, 0.1335075766], [-2.4679544585, 0.3989997376], [-2.4113230407, 0.6599402952], [-2.3271843716, 0.9133525609], [-2.2164982659, 1.1563457256], [-2.0805273793, 1.3861478363], [-1.9208228043, 1.6001374173], [-1.7392063765, 1.7958733752], [-1.5377498915, 1.9711228453], [-1.3187514713, 2.1238866629], [-1.0847093478, 2.2524221698], [-0.8382933648, 2.3552630924], [-0.5823145210, 2.4312362696], [-0.3196929042, 2.4794750346], [-0.0534243795, 2.4994291020], [0.2134535857, 2.4908708451], [0.4778965718, 2.4538978925], [0.7368879360, 2.3889320145], [0.9874732256, 2.2967143115], [1.2267938800, 2.1782967603], [1.4521198406, 2.0350302131], [1.6608806938, 1.8685489881], [1.8506949927, 1.6807522257], [2.0193974242, 1.4737822238], [2.1650635095, 1.2500000000]]);
			}
		}
	}
	translate(v = [-5.0000000000, -5.0000000000, -5.0000000000]) {
		linear_extrude(height = 10) {
			polygon(points = [[5.0000000000, 10.0000000000], [5.3203510999, 9.9897269638], [5.6393858084, 9.9589500691], [5.9557931435, 9.9077957850], [6.2682729195, 9.8364743152], [6.5755410901, 9.7452787351], [6.8763350244, 9.6345837867], [7.1694186956, 9.5048443395], [7.4535877600, 9.3565935206], [7.7276745061, 9.1904405245], [7.9905526525, 9.0070681093], [8.2411419765, 8.8072297918], [8.4784127530, 8.5917467505], [8.7013899854, 8.3615044513], [8.9091574123, 8.1174490093], [9.1008612730, 7.8605833006], [9.2757138150, 7.5919628416], [9.4329965319, 7.3126914512], [9.5720631151, 7.0239167156], [9.6923421102, 6.7268252721], [9.7933392652, 6.4226379332], [9.8746395609, 6.1126046698], [9.9359089171, 5.7979994752], [9.9768955647, 5.4801151295], [9.9974310810, 5.1602578879], [9.9974310810, 4.8397421121], [9.9768955647, 4.5198848705], [9.9359089171, 4.2020005248], [9.8746395609, 3.8873953302], [9.7933392652, 3.5773620668], [9.6923421102, 3.2731747279], [9.5720631151, 2.9760832844], [9.4329965319, 2.6873085488], [9.2757138150, 2.4080371584], [9.1008612730, 2.1394166994], [8.9091574123, 1.8825509907], [8.7013899854, 1.6384955487], [8.4784127530, 1.4082532495], [8.2411419765, 1.1927702082], [7.9905526525, 0.9929318907], [7.7276745061, 0.8095594755], [7.4535877600, 0.6434064794], [7.1694186956, 0.4951556605], [6.8763350244, 0.3654162133], [6.5755410901, 0.2547212649], [6.2682729195, 0.1635256848], [5.9557931435, 0.0922042150], [5.6393858084, 0.0410499309], [5.3203510999, 0.0102730362], [5.0000000000, 0.0000000000], [0, 0], [0, 10]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from solid import *
from solid.utils import *

import math
import matplotlib.pyplot as plt
import subprocess
import os

class Hole:
    def __init__(self, x, y, radius):
        """
        Hole defined by:
        :param x: x dimension for center point of the circle as a ratio of letter height
        :param y: y dimension for center point of the circle as a ratio of letter height
        :param radius: radius of circle as a ratio of letter height
        """
        self.x = x
        self.y = y
        self.radius = radius

class Letter3D:
    def __init__(self, name, outer_shape_points, height, holes=None):
        """
        3D Letter defined by:
        :param name: name of letter
        :param outer_shape_points: points defining the outer shape of the letter
        :param heigh: size of cube that letter fits inside
        :param holes: list of Holes
        """
        self.name = name
        self.outer_shape_points = outer_shape_points
        self.holes = holes if holes is None else []
        self.height = height
        self.shape = self.generate()


    def generate(self):
        shape = polygon(points=self.outer_shape_points)

        if self.holes:
            for hole in self.holes:
                circle_hole = circle(r=hole.radius*self.height)
                positioned_hole = translate([hole.x*self.height, hole.y*self.height])(circle_hole)
                shape = difference()(shape, positioned_hole)
        
        shape_3d = linear_extrude(height=self.height)(shape)
        shape_3d = translate([-self.height/2, -self.height/2, -self.height/2])(shape_3d)
        return shape_3d
    
    def render(self):
        scad_render_to_file(self.shape, f"output/{self.name}.scad", file_header='$fn=50;')
        subprocess.run(["C:\\Program Files\\OpenSCAD\\openscad.exe", "-o", f"output\\{self.name}.stl", f"output\\{self.name}.scad"])


class TwoLetter3D:
    def __init__(self, height, letterA, letterB, letterA_face, letterB_face):
        self.height = height
        self.letterA = letterA
        self.letterB = letterB
        self.letterA_face = letterA_face
        self.letterB_face = letterB_face

    def call_letter_generation(self, letter):
        letter = letter.upper()
        function_name = f"letter_{letter}"
        func = globals().get(function_name)
        if func is None:
            raise ValueError(f"No letter generation function defined for letter '{letter}'.")
        else:
            print(func)
        return func(self.height)
    
    def rotate_object(self, face, shape):
        face = face.lower()
        if face == "z":
            return shape
        if face == "x":
            return rotate(a=90, v=[0,1,0])(shape)
        if face == "y":
            return rotate(a=-90, v=[1,0,0])(shape)
        else:
            raise ValueError("Face must be one of 'x', 'y', or 'z'.")

    def render(self):
        letterA3D = self.call_letter_generation(self.letterA)
        letterA3D = self.rotate_object(self.letterA_face, letterA3D)

        letterB3D = self.call_letter_generation(self.letterB)
        # letterB3D = self.rotate_object(self.letterB_face, letterB3D)

        combined = intersection()(letterA3D, letterB3D)
        file_name = self.letterA + self.letterB
        scad_render_to_file(combined, f"output/{file_name}.scad", file_header='$fn=50;')
        subprocess.run(["C:\\Program Files\\OpenSCAD\\openscad.exe", "-o", f"output\\{file_name}.stl", f"output\\{file_name}.scad"])
    
                

def arc_points(radius, start_angle, end_angle, center=[0,0], num_points=50):
    angles = [start_angle + i * (end_angle - start_angle) / (num_points - 1)
              for i in range(num_points)]
    points = [
        (center[0] + radius * math.cos(math.radians(angle)),
         center[1] + radius * math.sin(math.radians(angle)))
        for angle in angles
    ]
    return points

def letter_A(h):
    shape_points = [(0,0), (h/2, h), (h, 0), (5/6*h, 0), (2/3*h, 1/3*h), (1/3*h, 1/3*h), (h/6, 0)]
    holes = [Hole(1/2, 7/12, 1/6)]
    A = Letter3D("A", shape_points, h, holes)
    return A.generate()


def letter_B(h):
    top_arc_points = arc_points(h/4, 90, -90, center=[3/4*h, 3/4*h])
    bottom_arc_points = arc_points(h/4, 90, -90, center=[3/4*h, h/4])
    other_points = [(0,0),(0,h)]

    shape_points = top_arc_points + bottom_arc_points + other_points
    holes = [Hole(1/2, 3/4, 1/6), Hole(1/2, 1/4, 1/6)]
    B = Letter3D("B", shape_points, h, holes)
    return B.generate()

def letter_C(h):
    outer_arc_points = arc_points(h/2, 30, 330)
    inner_arc_points = arc_points(h/4, 30, 330)[::-1]
    shape_points = outer_arc_points + inner_arc_points
    C = Letter3D("C", shape_points, h)
    return C.generate()


def letter_D(h):
    outer_arc_points = arc_points(h/2, 90, -90, center= [h/2, h/2])
    shape_points = outer_arc_points + [(0,0), (0, h)]
    holes = [Hole(1/2, 1/2, 1/6)]
    D = Letter3D("D", shape_points, h, holes)
    return D.generate()

def letter_E(h):
    points = [(0,0), (h,0), (h,h/5), (h/5,h/5), (h/5,2/5*h), (3/4*h,2/5*h), (3/4*h,3/5*h), (h/5,3/5*h), (h/5,4/5*h), (h,4/5*h), (h,h), (0,h)]
    E = Letter3D("E", points, h)
    return E.generate()

def letter_F(h):
    points = [(0,0), (h/5,0), (h/5,2/5*h), (3/4*h,2/5*h), (3/4*h,3/5*h), (h/5,3/5*h), (h/5,4/5*h), (h,4/5*h), (h,h), (0,h)]
    F = Letter3D("F", points, h)
    return F.generate()

if __name__ == "__main__":
    os.makedirs("output", exist_ok=True)

    # Just the letter B
    # letter_F(10)
    shape = TwoLetter3D(10, "C", "D", "x", "y")
    shape.render()
 
 
************************************************/
