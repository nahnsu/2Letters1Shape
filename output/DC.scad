// Generated by SolidPython 1.1.3 on 2025-02-20 04:04:03
$fn=50;


intersection() {
	translate(v = [-5.0000000000, -5.0000000000, -5.0000000000]) {
		linear_extrude(height = 10) {
			polygon(points = [[5.0000000000, 10.0000000000], [5.3203510999, 9.9897269638], [5.6393858084, 9.9589500691], [5.9557931435, 9.9077957850], [6.2682729195, 9.8364743152], [6.5755410901, 9.7452787351], [6.8763350244, 9.6345837867], [7.1694186956, 9.5048443395], [7.4535877600, 9.3565935206], [7.7276745061, 9.1904405245], [7.9905526525, 9.0070681093], [8.2411419765, 8.8072297918], [8.4784127530, 8.5917467505], [8.7013899854, 8.3615044513], [8.9091574123, 8.1174490093], [9.1008612730, 7.8605833006], [9.2757138150, 7.5919628416], [9.4329965319, 7.3126914512], [9.5720631151, 7.0239167156], [9.6923421102, 6.7268252721], [9.7933392652, 6.4226379332], [9.8746395609, 6.1126046698], [9.9359089171, 5.7979994752], [9.9768955647, 5.4801151295], [9.9974310810, 5.1602578879], [9.9974310810, 4.8397421121], [9.9768955647, 4.5198848705], [9.9359089171, 4.2020005248], [9.8746395609, 3.8873953302], [9.7933392652, 3.5773620668], [9.6923421102, 3.2731747279], [9.5720631151, 2.9760832844], [9.4329965319, 2.6873085488], [9.2757138150, 2.4080371584], [9.1008612730, 2.1394166994], [8.9091574123, 1.8825509907], [8.7013899854, 1.6384955487], [8.4784127530, 1.4082532495], [8.2411419765, 1.1927702082], [7.9905526525, 0.9929318907], [7.7276745061, 0.8095594755], [7.4535877600, 0.6434064794], [7.1694186956, 0.4951556605], [6.8763350244, 0.3654162133], [6.5755410901, 0.2547212649], [6.2682729195, 0.1635256848], [5.9557931435, 0.0922042150], [5.6393858084, 0.0410499309], [5.3203510999, 0.0102730362], [5.0000000000, 0.0000000000], [0, 0], [0, 10]]);
		}
	}
	rotate(a = -90, v = [0, 0, 1]) {
		translate(v = [-5.0000000000, -5.0000000000, -5.0000000000]) {
			linear_extrude(height = 10) {
				polygon(points = [[9.3301270189, 7.5000000000], [9.0387948484, 7.9475644476], [8.7013899854, 8.3615044513], [8.3217613875, 8.7370979763], [7.9042396813, 9.0700604263], [7.4535877600, 9.3565935206], [6.9749464512, 9.5934286231], [6.4737758721, 9.7778640289], [5.9557931435, 9.9077957850], [5.4269071715, 9.9817416901], [4.8931512411, 9.9988582039], [4.3606141916, 9.9589500691], [3.8353709579, 9.8624725392], [3.3234132705, 9.7105261849], [2.8305813044, 9.5048443395], [2.3624970575, 9.2477733259], [1.9245002169, 8.9422456905], [1.5215872470, 8.5917467505], [1.1583543913, 8.2002748347], [0.8389452414, 7.7722956725], [0.5670034681, 7.3126914512], [0.3456312568, 6.8267051218], [0.1773539185, 6.3198805903], [0.0640910829, 5.7979994752], [0.0071347997, 5.2670151533], [0.0071347997, 4.7329848467], [0.0640910829, 4.2020005248], [0.1773539185, 3.6801194097], [0.3456312568, 3.1732948782], [0.5670034681, 2.6873085488], [0.8389452414, 2.2277043275], [1.1583543913, 1.7997251653], [1.5215872470, 1.4082532495], [1.9245002169, 1.0577543095], [2.3624970575, 0.7522266741], [2.8305813044, 0.4951556605], [3.3234132705, 0.2894738151], [3.8353709579, 0.1375274608], [4.3606141916, 0.0410499309], [4.8931512411, 0.0011417961], [5.4269071715, 0.0182583099], [5.9557931435, 0.0922042150], [6.4737758721, 0.2221359711], [6.9749464512, 0.4065713769], [7.4535877600, 0.6434064794], [7.9042396813, 0.9299395737], [8.3217613875, 1.2629020237], [8.7013899854, 1.6384955487], [9.0387948484, 2.0524355524], [9.3301270189, 2.5000000000], [7.1650635095, 3.7500000000], [7.0193974242, 3.5262177762], [6.8506949927, 3.3192477743], [6.6608806938, 3.1314510119], [6.4521198406, 2.9649697869], [6.2267938800, 2.8217032397], [5.9874732256, 2.7032856885], [5.7368879360, 2.6110679855], [5.4778965718, 2.5461021075], [5.2134535857, 2.5091291549], [4.9465756205, 2.5005708980], [4.6803070958, 2.5205249654], [4.4176854790, 2.5687637304], [4.1617066352, 2.6447369076], [3.9152906522, 2.7475778302], [3.6812485287, 2.8761133371], [3.4622501085, 3.0288771547], [3.2607936235, 3.2041266248], [3.0791771957, 3.3998625827], [2.9194726207, 3.6138521637], [2.7835017341, 3.8436542744], [2.6728156284, 4.0866474391], [2.5886769593, 4.3400597048], [2.5320455415, 4.6010002624], [2.5035673999, 4.8664924234], [2.5035673999, 5.1335075766], [2.5320455415, 5.3989997376], [2.5886769593, 5.6599402952], [2.6728156284, 5.9133525609], [2.7835017341, 6.1563457256], [2.9194726207, 6.3861478363], [3.0791771957, 6.6001374173], [3.2607936235, 6.7958733752], [3.4622501085, 6.9711228453], [3.6812485287, 7.1238866629], [3.9152906522, 7.2524221698], [4.1617066352, 7.3552630924], [4.4176854790, 7.4312362696], [4.6803070958, 7.4794750346], [4.9465756205, 7.4994291020], [5.2134535857, 7.4908708451], [5.4778965718, 7.4538978925], [5.7368879360, 7.3889320145], [5.9874732256, 7.2967143115], [6.2267938800, 7.1782967603], [6.4521198406, 7.0350302131], [6.6608806938, 6.8685489881], [6.8506949927, 6.6807522257], [7.0193974242, 6.4737822238], [7.1650635095, 6.2500000000]]);
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from solid import *
from solid.utils import *

import math
import matplotlib.pyplot as plt
import subprocess
import os

class Hole:
    def __init__(self, x, y, radius):
        """
        Hole defined by:
        :param x: x dimension for center point of the circle as a ratio of letter height
        :param y: y dimension for center point of the circle as a ratio of letter height
        :param radius: radius of circle as a ratio of letter height
        """
        self.x = x
        self.y = y
        self.radius = radius

class Letter3D:
    def __init__(self, name, outer_shape_points, height, holes=None):
        """
        3D Letter defined by:
        :param name: name of letter
        :param outer_shape_points: points defining the outer shape of the letter
        :param heigh: size of cube that letter fits inside
        :param holes: list of Holes
        """
        self.name = name
        self.outer_shape_points = outer_shape_points
        self.holes = holes if holes is None else []
        self.height = height


    def generate(self):
        shape = polygon(points=self.outer_shape_points)

        if self.holes:
            for hole in self.holes:
                circle_hole = circle(r=hole.radius*self.height)
                positioned_hole = translate([hole.x*self.height, hole.y*self.height])(circle_hole)
                shape = difference()(shape, positioned_hole)
        
        shape_3d = linear_extrude(height=self.height)(shape)
        shape_3d = translate([-self.height/2, -self.height/2, -self.height/2])(shape_3d)
        return shape_3d
    
    def render(self):
        scad_render_to_file(self.shape, f"output/{self.name}.scad", file_header='$fn=50;')
        subprocess.run(["C:\\Program Files\\OpenSCAD\\openscad.exe", "-o", f"output\\{self.name}.stl", f"output\\{self.name}.scad"])


class TwoLetter3D:
    def __init__(self, height, letterA, letterA_face, letterB=None, letterB_face=None):
        self.height = height
        self.letterA = letterA
        self.letterB = letterB
        self.letterA_face = letterA_face
        self.letterB_face = letterB_face

    def call_letter_generation(self, letter):
        letter = letter.upper()
        function_name = f"letter_{letter}"
        func = globals().get(function_name)
        if func is None:
            raise ValueError(f"No letter generation function defined for letter '{letter}'.")
        else:
            print(func)
        return func(self.height)
    
    def rotate_object(self, face, shape):
        face = face.lower()
        if face == "z":
            return shape
        if face == "x":
            return rotate(a=90, v=[0,1,0])(shape)
        if face == "y":
            return rotate(a=-90, v=[0,0,1])(shape)
        else:
            raise ValueError("Face must be one of 'x', 'y', or 'z'.")

    def render(self):
        if self.letterA:
            letterA3D = self.call_letter_generation(self.letterA)
            letterA3D = self.rotate_object(self.letterA_face, letterA3D)

        if self.letterB:
            letterB3D = self.call_letter_generation(self.letterB)
            letterB3D = self.rotate_object(self.letterB_face, letterB3D)
            combined = intersection()(letterA3D, letterB3D)
            file_name = self.letterA + self.letterB
            scad_render_to_file(combined, f"output/{file_name}.scad", file_header='$fn=50;')
            subprocess.run(["C:\\Program Files\\OpenSCAD\\openscad.exe", "-o", f"output\\{file_name}.stl", f"output\\{file_name}.scad"])
            return
        else:
            file_name = self.letterA
            scad_render_to_file(letterA3D, f"output/{file_name}.scad", file_header='$fn=50;')
            subprocess.run(["C:\\Program Files\\OpenSCAD\\openscad.exe", "-o", f"output\\{file_name}.stl", f"output\\{file_name}.scad"])
    
                

def arc_points(radius, start_angle, end_angle, center=[0,0], num_points=50):
    angles = [start_angle + i * (end_angle - start_angle) / (num_points - 1)
              for i in range(num_points)]
    points = [
        (center[0] + radius * math.cos(math.radians(angle)),
         center[1] + radius * math.sin(math.radians(angle)))
        for angle in angles
    ]
    return points

def letter_A(h):
    shape_points = [(0,0), (h/2, h), (h, 0), (5/6*h, 0), (2/3*h, 1/3*h), (1/3*h, 1/3*h), (h/6, 0)]
    holes = [Hole(1/2, 7/12, 1/6)]
    A = Letter3D("A", shape_points, h, holes)
    return A.generate()

def letter_B(h):
    top_arc_points = arc_points(h/4, 90, -90, center=[3/4*h, 3/4*h])
    bottom_arc_points = arc_points(h/4, 90, -90, center=[3/4*h, h/4])
    other_points = [(0,0),(0,h)]

    shape_points = top_arc_points + bottom_arc_points + other_points
    holes = [Hole(1/2, 3/4, 1/6), Hole(1/2, 1/4, 1/6)]
    B = Letter3D("B", shape_points, h, holes)
    return B.generate()

def letter_C(h):
    outer_arc_points = arc_points(h/2, 30, 330, center=[h/2,h/2])
    inner_arc_points = arc_points(h/4, 30, 330, center=[h/2,h/2])[::-1]
    shape_points = outer_arc_points + inner_arc_points
    # print(shape_points)
    C = Letter3D("C", shape_points, h)
    return C.generate()


def letter_D(h):
    outer_arc_points = arc_points(h/2, 90, -90, center= [h/2, h/2])
    shape_points = outer_arc_points + [(0,0), (0, h)]
    holes = [Hole(1/2, 1/2, 1/6)]
    D = Letter3D("D", shape_points, h, holes)
    return D.generate()

def letter_E(h):
    points = [(0,0), (h,0), (h,h/5), (h/5,h/5), (h/5,2/5*h), (3/4*h,2/5*h), (3/4*h,3/5*h), (h/5,3/5*h), (h/5,4/5*h), (h,4/5*h), (h,h), (0,h)]
    E = Letter3D("E", points, h)
    return E.generate()

def letter_F(h):
    points = [(0,0), (h/5,0), (h/5,2/5*h), (3/4*h,2/5*h), (3/4*h,3/5*h), (h/5,3/5*h), (h/5,4/5*h), (h,4/5*h), (h,h), (0,h)]
    F = Letter3D("F", points, h)
    return F.generate()

if __name__ == "__main__":
    os.makedirs("output", exist_ok=True)

    letters = [chr(x) for x in range(ord('A'), ord('F') + 1)]
    for letter in letters:
        for other_letter in letters:
            shape = TwoLetter3D(10, letter, "z", other_letter, "y")
            shape.render()
 
 
************************************************/
